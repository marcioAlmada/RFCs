====== PHP RFC: Strict Argument Count On Function Calls ======
  * Version: 0.2
  * Date: 2015-02-20
  * Author: Márcio Almada
  * Status: Draft
  * First Published at: http://wiki.php.net/rfc/strict_argcount

===== Introduction =====

This RFC proposes to conditionally add a **strict argument count** check for function **calls** on PHP7, being sensitive towards implementations already depending on the **variable-length** argument lists API.

Strict checks on argument counts are good to catch bugs on user space code. Even PHP internal functions have this:

<code php>
strlen("foo", "bar");
// PHP warning:  strlen() expects exactly 1 parameter, 2 given on line 1
</code>

===== Proposal =====

This RFC proposes that the engine should emit a ''Warning'' when a function is called with an exceeding number of arguments:

<code php>
/**
 * fn expects only one argument
 * @param  $arg
 */
function fn($arg) {}

fn(1); // Ok
fn(1, 2); // Warning
call_user_func_array("fn", [1, 2, 3]); // Warning

// Warning: fn() expects at most 1 parameter, 2 given, defined in %s on line %u and called in %s on line %u
// Warning: fn() expects at most 1 parameter, 3 given, defined in %s on line %u and called in %s on line %u
</code>

The implementation is aware of the native ''variable-lengh argument list API'' and won't emit any warning if the called function or method is explicitly variadic or implemented with:

  * ''func_get_arg();''
  * ''func_get_args();''

The following examples **WON'T** break:

<code php>
/** fn expects a variable-length argument lists */
function fn($arg) {
    $arg = func_get_arg();
    $args = func_get_args();
}

fn(1); // Ok
fn(...[1, 2, 3, 4, 5]); // Ok
call_user_func_array("fn", [1, 2, 3, 4, 5, 6, 7]); // Ok
</code>

The implementation also supports **dynamic resolution** of function names. So **aliased** calls to dynamic arguments API is also covered:

<code php>
namespace some\namespace;

use function func_get_arg  as foo;
use function func_get_args as bar;

/** fn expects a variable-length argument lists */
function fn($arg) {
    $arg = foo(0);
    $args = bar();
}

fn(1);
fn(1, 2); // Ok
call_user_func("fn", 1, 2, 3); // Ok
</code>

===== Details =====

During compilation the function implementations will be verified as sensitive to dynamic argument calls.
In other words, all the functions and methods implemented with ''func_get_arg()'' and ''func_get_args()''
will be marked with a ''ZEND_ACC_DYNAMIC_ARGCOUNT'' flag:

<code c>
CG(active_op_array)->fn_flags |= ZEND_ACC_DYNAMIC_ARGCOUNT;
</code>

During script execution, when the **function** or **method** finally gets invoked with an exceeding argument count,
the engine will check for the flag and emit a warning in case current ''execute_data'' is **not variadic**
and was not marked as sensitive to dynamic argument count:

<code>
Warning: %s() expects at most %u parameters, %u given, defined in %s on line %u and called in %s on line %u
</code>

=> It's worth to mention that, currently, PHP implementation already checks for exceeding arguments on every function call,
the proposal only adds a warning according to each function implementation. The performance impact is **negligible**.

==== About Dead Code ====

Functions will be marked as sensitive to variable-length argument list even if the implementation contains dead code such as:

<code php>
function fn($arg) {
    if(false){
        func_get_args();
    }
}
fn(1, 2, 3); // Ok
</code>

Maybe when other levels of optimizations get added to PHP and dead code gets wiped before execution this little limitation will vanish. But, right now, there is no advantages into checking for dead code and perhaps some might prefer the implementation this way.

==== About @ Operator ====

The implementation is aware of the ''@'' operator.

==== About Magic Methods ====

The patch won't affect magic method calls. Magic methods have no signature thus there is no way to validate argument count.

==== About Variadic Functions ====

Variadic functions are explicitly implemented to handle variable-length argument lists, and won't be affect by the patch.

===== Open Issues =====

Current patch is not aware of "obfuscated" calls to ''func_get_arg()'' and ''func_get_args()'':

<code php>
function fn() {
    $fn = "func_get_args"
    $fn();
}

fn(1, 2, 3);
// Warning: fn() expects at most 1 parameter, 3 given, defined in %s on line %d and called...
</code>

This is **not** a **common** use case. A github search for the term "func_get_args" haven't revealed a single result of the API being used in this way. Besides that, there is no legit reason to use the variable-length argument API like that.

Therefore, this RFC also proposes to **block** ''func_get_arg()'', ''func_get_args()'' from being called dynamically by emitting a fatal error:
  
<code php>
$fn = "func_get_args"
$fn();
Fatal Error: func_get_args() should not be called dynamically...
</code>

At first sight a fatal error might look too harsh. But the break would be extremally localized. Even **if** a single person become affected by this particular change, fixing the the obfuscated dynamic call with a direct call is no sacrifice at all.

=> This bit shaw be addressed on discussion phase and was not implemented on the patch yet. It will be implemented if we reach consensus on that or maybe after the voting phase if the RFC passes.

===== Backward Incompatible Changes =====

  * Code with functions not implemented to manage variable-length argument lists being called with an exceeding amount of arguments, according to function signatures, will emit a warning.

 => This is a good BC break. In a staggering majority of use cases, passing extra args is or will become a bug at some point. 

 => I made a blog post to clarify possible misunderstandings of this RFC on community media, it contains an anedoctal user story you may find worth reading: [[https://medium.com/@marcioalmada/why-strict-arg-count-on-function-calls-will-make-php-better-saner-easier-cc360bf7c7da|Why strict argument count on function calls will make PHP better, saner, easier…]]

  * People using ''debug_backtrace()[0]["args"];'' as a **substitute** ''for func_get_args()'' are candidates to be affected, but this is not guaranteed.

=> Again, a very localized BC break. Besides that, ''debug_backtrace()'' should not be **abused** this way in the first place, we have a dedicated API for that.

===== Proposed PHP Version(s) =====

This is proposed for the next PHP x, which at the time of this writing would be PHP 7.

===== Vote =====

Two weeks yes/no voting requiring 2/3 majority.

===== Patch =====

  - Pull request is at[[https://github.com/php/php-src/pull/1108]]
  - Most relevant commit is [[https://github.com/marcioAlmada/php-src/commit/c081fff92557997ad088338752d73e97256f03b6|c081fff]].

=> Some unrelated tests broke because the new emitted warning evidenced bugs on them. These tests were fixed without prejudice to the test suite.

===== Rejected Features =====

None so far.

===== Changelog =====
  * 0.1: Initial patch and RFC
  * 0.2: Remove compile check for ''func_num_args()'' as it's is not directly associated with variadic behaviors
